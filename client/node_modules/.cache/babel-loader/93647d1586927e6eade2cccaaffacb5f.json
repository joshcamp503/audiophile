{"ast":null,"code":"var _s = $RefreshSig$();\n\n// Returns a string, either 'mobile', 'tablet', or 'desktop'\n// Used with product object, ie- product.image[useMediaSize()]\n// Change images at media breakpoints\nimport { useState, useEffect } from \"react\";\nexport const useMediaSize = () => {\n  _s();\n\n  // determine current device for initial state\n  const getCurrentDevice = () => {\n    const deviceWidth = window.innerWidth;\n    if (deviceWidth >= 1200) return 'desktop';\n    if (deviceWidth >= 600) return 'tablet';\n    return 'mobile';\n  }; // set default state\n\n\n  const [mediaSize, setMediaSize] = useState(getCurrentDevice()); // change state when browser size hits breakpoints\n\n  useEffect(() => {\n    // breakpoints\n    const findMedia = () => {\n      const queries = ['(max-width: 599px)', '(min-width: 600px) and (max-width: 1199px)', '(min-width: 1200px)']; // returns first string from queries array that matches media query\n\n      const currentMedia = queries.find(query => {\n        return window.matchMedia(query).matches;\n      }); // change state\n\n      const changeMedia = query => {\n        switch (query) {\n          case '(max-width: 599px)':\n            setMediaSize('mobile');\n            return;\n\n          case '(min-width: 600px) and (max-width: 1199px)':\n            setMediaSize('tablet');\n            return;\n\n          case '(min-width: 1200px)':\n            setMediaSize('desktop');\n            return;\n\n          default:\n            setMediaSize('default');\n            return;\n        }\n      }; // returns mediaQueryList object with \"onchange\" functionality\n      // change state when \"onchange\" fires\n\n\n      matchMedia(currentMedia).onchange = () => {\n        const newMedia = queries.find(query => {\n          return window.matchMedia(query).matches;\n        });\n        changeMedia(newMedia);\n      }; // console.log(mediaSize)\n\n    };\n\n    findMedia();\n  }, [mediaSize]);\n  return mediaSize;\n};\n\n_s(useMediaSize, \"6tViw/H688WjlaAOsPPT21KBErk=\");","map":{"version":3,"sources":["/home/joshcamp503/Desktop/Code/frontend-mentor-projects/audiophile-ecommerce-website/src/hooks/useMediaSize.js"],"names":["useState","useEffect","useMediaSize","getCurrentDevice","deviceWidth","window","innerWidth","mediaSize","setMediaSize","findMedia","queries","currentMedia","find","query","matchMedia","matches","changeMedia","onchange","newMedia"],"mappings":";;AAAA;AACA;AACA;AAEA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAChC;AACA,QAAMC,gBAAgB,GAAG,MAAM;AAC7B,UAAMC,WAAW,GAAGC,MAAM,CAACC,UAA3B;AACA,QAAGF,WAAW,IAAI,IAAlB,EAAwB,OAAO,SAAP;AACxB,QAAGA,WAAW,IAAI,GAAlB,EAAuB,OAAO,QAAP;AACvB,WAAO,QAAP;AACD,GALD,CAFgC,CAShC;;;AACA,QAAM,CAACG,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAACG,gBAAgB,EAAjB,CAA1C,CAVgC,CAYhC;;AACAF,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMQ,SAAS,GAAG,MAAM;AACtB,YAAMC,OAAO,GAAG,CACd,oBADc,EAEd,4CAFc,EAGd,qBAHc,CAAhB,CADsB,CAOtB;;AACA,YAAMC,YAAY,GAAGD,OAAO,CAACE,IAAR,CAAaC,KAAK,IAAI;AACzC,eAAOR,MAAM,CAACS,UAAP,CAAkBD,KAAlB,EAAyBE,OAAhC;AACD,OAFoB,CAArB,CARsB,CAYtB;;AACA,YAAMC,WAAW,GAAIH,KAAD,IAAW;AAC7B,gBAAQA,KAAR;AACE,eAAK,oBAAL;AACEL,YAAAA,YAAY,CAAC,QAAD,CAAZ;AACA;;AACF,eAAK,4CAAL;AACEA,YAAAA,YAAY,CAAC,QAAD,CAAZ;AACA;;AACF,eAAK,qBAAL;AACEA,YAAAA,YAAY,CAAC,SAAD,CAAZ;AACA;;AACF;AACEA,YAAAA,YAAY,CAAC,SAAD,CAAZ;AACA;AAZJ;AAcD,OAfD,CAbsB,CA8BtB;AACA;;;AACAM,MAAAA,UAAU,CAACH,YAAD,CAAV,CAAyBM,QAAzB,GAAoC,MAAM;AACxC,cAAMC,QAAQ,GAAGR,OAAO,CAACE,IAAR,CAAaC,KAAK,IAAI;AACrC,iBAAOR,MAAM,CAACS,UAAP,CAAkBD,KAAlB,EAAyBE,OAAhC;AACD,SAFgB,CAAjB;AAGAC,QAAAA,WAAW,CAACE,QAAD,CAAX;AACD,OALD,CAhCsB,CAsCtB;;AACD,KAvCD;;AAyCAT,IAAAA,SAAS;AAER,GA7CM,EA6CJ,CAACF,SAAD,CA7CI,CAAT;AAgDA,SAAOA,SAAP;AAED,CA/DM;;GAAML,Y","sourcesContent":["// Returns a string, either 'mobile', 'tablet', or 'desktop'\n// Used with product object, ie- product.image[useMediaSize()]\n// Change images at media breakpoints\n\nimport { useState, useEffect } from \"react\";\n\nexport const useMediaSize = () => {\n  // determine current device for initial state\n  const getCurrentDevice = () => {\n    const deviceWidth = window.innerWidth\n    if(deviceWidth >= 1200) return 'desktop'\n    if(deviceWidth >= 600) return 'tablet'\n    return 'mobile'\n  }\n\n  // set default state\n  const [mediaSize, setMediaSize] = useState(getCurrentDevice())\n\n  // change state when browser size hits breakpoints\n  useEffect(() => {\n    // breakpoints\n    const findMedia = () => {\n      const queries = [\n        '(max-width: 599px)', \n        '(min-width: 600px) and (max-width: 1199px)', \n        '(min-width: 1200px)'\n      ]\n      \n      // returns first string from queries array that matches media query\n      const currentMedia = queries.find(query => {\n        return window.matchMedia(query).matches\n      })\n\n      // change state\n      const changeMedia = (query) => {\n        switch (query) {\n          case '(max-width: 599px)':\n            setMediaSize('mobile')\n            return\n          case '(min-width: 600px) and (max-width: 1199px)':\n            setMediaSize('tablet')\n            return\n          case '(min-width: 1200px)':\n            setMediaSize('desktop')\n            return\n          default:\n            setMediaSize('default')\n            return\n        }\n      }\n\n      // returns mediaQueryList object with \"onchange\" functionality\n      // change state when \"onchange\" fires\n      matchMedia(currentMedia).onchange = () => {\n        const newMedia = queries.find(query => {\n          return window.matchMedia(query).matches\n        })\n        changeMedia(newMedia)\n      }\n      // console.log(mediaSize)\n    }\n\n    findMedia()\n\n    }, [mediaSize])\n  \n  \n  return mediaSize\n\n};\n"]},"metadata":{},"sourceType":"module"}