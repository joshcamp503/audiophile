{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nexport const useFetch = (url, params) => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(false);\n  const [error, setError] = useState(null); // create query string and add to url to fetch specific data\n\n  const createQueryString = params => {\n    const category = params.category;\n    const slug = params.slug;\n    let queryString = `?category=${category}`;\n\n    if (slug) {\n      queryString += `&slug=${slug}`;\n    }\n\n    return queryString;\n  };\n\n  const queryString = createQueryString(params);\n  url += queryString;\n  const location = useLocation();\n  console.log(location);\n  useEffect(() => {\n    // abort controller for async data\n    const controller = new AbortController();\n\n    const fetchData = async () => {\n      setIsPending(true);\n\n      try {\n        const res = await fetch(url, {\n          signal: controller.signal\n        });\n\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n\n        const data = await res.json();\n        setIsPending(false);\n        setData(data);\n        console.log('data fetched');\n        setError(null);\n      } catch (err) {\n        if (err.name === \"AbortError\") {\n          console.log(\"the fetch was aborted\");\n        } else {\n          setIsPending(false);\n          setError('Could not fetch the data');\n        }\n      }\n    };\n\n    fetchData();\n    return () => {\n      controller.abort();\n    };\n  }, [url, location]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"MIHbSkfPX6szPB4h7mVjfu8vFig=\", false, function () {\n  return [useLocation];\n});","map":{"version":3,"sources":["/home/joshcamp503/Desktop/Code/frontend-mentor-projects/audiophile-ecommerce-website/src/hooks/useFetch.js"],"names":["useState","useEffect","useLocation","useFetch","url","params","data","setData","isPending","setIsPending","error","setError","createQueryString","category","slug","queryString","location","console","log","controller","AbortController","fetchData","res","fetch","signal","ok","Error","statusText","json","err","name","abort"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,GAAD,EAAMC,MAAN,KAAiB;AAAA;;AACvC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC,CAHuC,CAKvC;;AACA,QAAMY,iBAAiB,GAAIP,MAAD,IAAY;AACpC,UAAMQ,QAAQ,GAAGR,MAAM,CAACQ,QAAxB;AACA,UAAMC,IAAI,GAAGT,MAAM,CAACS,IAApB;AACA,QAAIC,WAAW,GAAI,aAAYF,QAAS,EAAxC;;AACA,QAAGC,IAAH,EAAS;AACPC,MAAAA,WAAW,IAAK,SAAQD,IAAK,EAA7B;AACD;;AACD,WAAOC,WAAP;AACD,GARD;;AAUA,QAAMA,WAAW,GAAGH,iBAAiB,CAACP,MAAD,CAArC;AACAD,EAAAA,GAAG,IAAIW,WAAP;AAEA,QAAMC,QAAQ,GAAGd,WAAW,EAA5B;AACAe,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMkB,UAAU,GAAG,IAAIC,eAAJ,EAAnB;;AAEA,UAAMC,SAAS,GAAG,YAAY;AAC5BZ,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,UAAI;AACF,cAAMa,GAAG,GAAG,MAAMC,KAAK,CAACnB,GAAD,EAAM;AAAEoB,UAAAA,MAAM,EAAEL,UAAU,CAACK;AAArB,SAAN,CAAvB;;AACA,YAAG,CAACF,GAAG,CAACG,EAAR,EAAY;AACV,gBAAM,IAAIC,KAAJ,CAAUJ,GAAG,CAACK,UAAd,CAAN;AACD;;AACD,cAAMrB,IAAI,GAAG,MAAMgB,GAAG,CAACM,IAAJ,EAAnB;AAEAnB,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAW,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAP,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,OAXD,CAWE,OAAOkB,GAAP,EAAY;AACZ,YAAIA,GAAG,CAACC,IAAJ,KAAa,YAAjB,EAA+B;AAC7Bb,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD,SAFD,MAEO;AACLT,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,UAAAA,QAAQ,CAAC,0BAAD,CAAR;AACD;AACF;AACF,KAtBD;;AAwBAU,IAAAA,SAAS;AAET,WAAO,MAAM;AACXF,MAAAA,UAAU,CAACY,KAAX;AACD,KAFD;AAID,GAlCQ,EAkCN,CAAC3B,GAAD,EAAMY,QAAN,CAlCM,CAAT;AAoCA,SAAO;AAAEV,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA;AAAnB,GAAP;AACD,CA3DM;;GAAMP,Q;UAmBMD,W","sourcesContent":["import { useState, useEffect } from \"react\"\n\nimport { useLocation } from \"react-router-dom\"\n\nexport const useFetch = (url, params) => {\n  const [data, setData] = useState(null)\n  const [isPending, setIsPending] = useState(false)\n  const [error, setError] = useState(null)\n\n  // create query string and add to url to fetch specific data\n  const createQueryString = (params) => {\n    const category = params.category\n    const slug = params.slug\n    let queryString = `?category=${category}`\n    if(slug) {\n      queryString += `&slug=${slug}`\n    }\n    return queryString\n  }\n\n  const queryString = createQueryString(params)\n  url += queryString\n\n  const location = useLocation()\n  console.log(location)\n\n  useEffect(() => {\n    // abort controller for async data\n    const controller = new AbortController()\n\n    const fetchData = async () => {\n      setIsPending(true)\n      \n      try {\n        const res = await fetch(url, { signal: controller.signal })\n        if(!res.ok) {\n          throw new Error(res.statusText)\n        }\n        const data = await res.json()\n\n        setIsPending(false)\n        setData(data)\n        console.log('data fetched')\n        setError(null)\n      } catch (err) {\n        if (err.name === \"AbortError\") {\n          console.log(\"the fetch was aborted\")\n        } else {\n          setIsPending(false)\n          setError('Could not fetch the data')\n        }\n      }\n    }\n\n    fetchData()\n\n    return () => {\n      controller.abort()\n    }\n\n  }, [url, location])\n\n  return { data, isPending, error }\n}"]},"metadata":{},"sourceType":"module"}