{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nexport const useFetch = () => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(false);\n  const [error, setError] = useState(null);\n  const [path, setPath] = useState(null);\n  const params = useParams();\n  useEffect(() => {\n    // abort controller for async data\n    const controller = new AbortController(); // create query string and add to url to fetch specific data\n\n    const createQueryString = () => {\n      let queryString = `?category=${params.category}`;\n\n      if (params.slug) {\n        queryString += `&slug=${params.slug}`;\n      }\n\n      return queryString;\n    };\n\n    const queryString = createQueryString();\n    const url = 'http://localhost:3001/products' + queryString;\n    setPath(url);\n\n    const fetchData = async () => {\n      setIsPending(true);\n\n      try {\n        const res = await fetch(path, {\n          signal: controller.signal\n        });\n\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n\n        const data = await res.json();\n        setIsPending(false);\n        setData(data);\n        setError(null);\n      } catch (err) {\n        if (err.name === \"AbortError\") {\n          console.log(\"the fetch was aborted\");\n        } else {\n          setIsPending(false);\n          setError('Could not fetch the data');\n        }\n      }\n    };\n\n    fetchData();\n    return () => {\n      controller.abort();\n    };\n  }, [path]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"2mdBsT38/OphJskNKteqfrdkQSM=\", false, function () {\n  return [useParams];\n});","map":{"version":3,"sources":["/home/joshcamp503/Desktop/Code/frontend-mentor-projects/audiophile-ecommerce-website/src/hooks/useFetch.js"],"names":["useState","useEffect","useParams","useFetch","data","setData","isPending","setIsPending","error","setError","path","setPath","params","controller","AbortController","createQueryString","queryString","category","slug","url","fetchData","res","fetch","signal","ok","Error","statusText","json","err","name","console","log","abort"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAC5B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAMY,MAAM,GAAGV,SAAS,EAAxB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMY,UAAU,GAAG,IAAIC,eAAJ,EAAnB,CAFc,CAId;;AACA,UAAMC,iBAAiB,GAAG,MAAM;AAC9B,UAAIC,WAAW,GAAI,aAAYJ,MAAM,CAACK,QAAS,EAA/C;;AACA,UAAGL,MAAM,CAACM,IAAV,EAAgB;AACdF,QAAAA,WAAW,IAAK,SAAQJ,MAAM,CAACM,IAAK,EAApC;AACD;;AACD,aAAOF,WAAP;AACD,KAND;;AAQA,UAAMA,WAAW,GAAGD,iBAAiB,EAArC;AACA,UAAMI,GAAG,GAAG,mCAAmCH,WAA/C;AAEAL,IAAAA,OAAO,CAACQ,GAAD,CAAP;;AAEA,UAAMC,SAAS,GAAG,YAAY;AAC5Bb,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,UAAI;AACF,cAAMc,GAAG,GAAG,MAAMC,KAAK,CAACZ,IAAD,EAAO;AAAEa,UAAAA,MAAM,EAAEV,UAAU,CAACU;AAArB,SAAP,CAAvB;;AACA,YAAG,CAACF,GAAG,CAACG,EAAR,EAAY;AACV,gBAAM,IAAIC,KAAJ,CAAUJ,GAAG,CAACK,UAAd,CAAN;AACD;;AACD,cAAMtB,IAAI,GAAG,MAAMiB,GAAG,CAACM,IAAJ,EAAnB;AAEApB,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAK,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,OAVD,CAUE,OAAOmB,GAAP,EAAY;AACZ,YAAIA,GAAG,CAACC,IAAJ,KAAa,YAAjB,EAA+B;AAC7BC,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD,SAFD,MAEO;AACLxB,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,UAAAA,QAAQ,CAAC,0BAAD,CAAR;AACD;AACF;AACF,KArBD;;AAuBAW,IAAAA,SAAS;AAET,WAAO,MAAM;AACXP,MAAAA,UAAU,CAACmB,KAAX;AACD,KAFD;AAID,GA/CQ,EA+CN,CAACtB,IAAD,CA/CM,CAAT;AAiDA,SAAO;AAAEN,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA;AAAnB,GAAP;AACD,CAzDM;;GAAML,Q;UAKID,S","sourcesContent":["import { useState, useEffect } from \"react\"\nimport { useParams } from \"react-router-dom\"\n\nexport const useFetch = () => {\n  const [data, setData] = useState(null)\n  const [isPending, setIsPending] = useState(false)\n  const [error, setError] = useState(null)\n  const [path, setPath] = useState(null)\n  const params = useParams()\n  \n  useEffect(() => {\n    // abort controller for async data\n    const controller = new AbortController()\n\n    // create query string and add to url to fetch specific data\n    const createQueryString = () => {\n      let queryString = `?category=${params.category}`\n      if(params.slug) {\n        queryString += `&slug=${params.slug}`\n      }\n      return queryString\n    }\n  \n    const queryString = createQueryString()\n    const url = 'http://localhost:3001/products' + queryString\n  \n    setPath(url)\n\n    const fetchData = async () => {\n      setIsPending(true)\n      \n      try {\n        const res = await fetch(path, { signal: controller.signal })\n        if(!res.ok) {\n          throw new Error(res.statusText)\n        }\n        const data = await res.json()\n\n        setIsPending(false)\n        setData(data)\n        setError(null)\n      } catch (err) {\n        if (err.name === \"AbortError\") {\n          console.log(\"the fetch was aborted\")\n        } else {\n          setIsPending(false)\n          setError('Could not fetch the data')\n        }\n      }\n    }\n\n    fetchData()\n\n    return () => {\n      controller.abort()\n    }\n\n  }, [path])\n\n  return { data, isPending, error }\n}"]},"metadata":{},"sourceType":"module"}